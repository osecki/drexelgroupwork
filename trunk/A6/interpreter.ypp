%{
#include <iostream>
#include <string>
#include "Expr.h"
#include "Ident.h"
#include "Plus.h"
#include "Minus.h"
#include "Times.h"
#include "Program.h"
#include "IfStmt.h"
#include "WhileStmt.h"
#include "AssignStmt.h"
#include "Stmt.h"
#include "StmtList.h"
#include "Number.h"

using namespace std;
void yyerror (const char *error);

extern "C"
{

/**
 *  Program:  interpreter.ypp
 *  Authors:  Group 7: Jordan Osecki, Geoff Oxholm, Alimoor Reza
 *  Class:    CS550, Assignment 6, Spring 2009
**/

    int yyparse(void);
    int yylex(void);
    int yywrap()
    {
            return 1;
    }
}

StmtList *SL;
Program *P;

%}

%union {
  int       value;  /* For the lexical analyser. NUMBER tokens */
  char      *ident;  /* For the lexical analyser. IDENT tokens */
  Expr      *exprptr;
  Stmt      *stmtptr;
  StmtList  *stmtlistptr;  
}

%token <ident> IDENT
%token <value> NUMBER
%token ASSIGNOP
%token IF
%token THEN
%token ELSE
%token FI
%token WHILE
%token DO
%token OD
%type <exprptr> expr
%type <exprptr> term
%type <exprptr> factor
%type <stmtptr> stmt
%type <stmtptr> assign_stmt
%type <stmtptr> if_stmt
%type <stmtptr> while_stmt
%type <stmtlistptr> stmt_list

%%

program:
    stmt_list {
        P = new Program($1);
        P->compile();
				P->dump();
    }
    ;

stmt_list:
    stmt ';' stmt_list {
        $3->insert($1); 
        $$ = $3;
    }
    |
    stmt  {
        SL = new StmtList();  SL->insert($1); $$ = SL;
    }
    ;

stmt:
    assign_stmt {
        $$ = $1;
    }
    |
    if_stmt {
        $$ = $1;
    }
    |
    while_stmt  {
        $$ = $1;
    }
    ;

assign_stmt:
    IDENT ASSIGNOP expr {
        $$ = new AssignStmt(string($1),$3);
    }
    ;

if_stmt:
    IF expr THEN stmt_list ELSE stmt_list FI {
        $$ = new IfStmt($2,$4,$6);
    }
    ;

while_stmt:
    WHILE expr DO stmt_list OD {
        $$ = new WhileStmt($2,$4);
    }
    ;

expr:
    expr '+' term {
        $$ = new Plus($1,$3);
    }
    |
    expr '-' term {
        $$ = new Minus($1,$3);
    }
    |
    term {
        $$ = $1;
    }
    ;

term: term '*' factor {
        $$ = new Times($1,$3);
    }
    |
    factor {
        $$ = $1;
    }
    ;

factor:
    '(' expr ')'  {
        $$ = $2;
    }
    |
    NUMBER {
        $$ = new Number($1);
    }
    |
    IDENT {
        $$ = new Ident(string($1));
    }
    ;

%%

int main()
{
    cout << "Translating Program" << endl;
    return yyparse();
}

void yyerror (const char *error)
{
    cout << error << endl;
}

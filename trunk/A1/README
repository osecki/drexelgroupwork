Assignment 1
CS550 Programming Languages
Spring 2009, 4/13/2009
Team:  Jordan Osecki, Geoff Oxholm, Rich Price
Team Lead on this Assignment:  Jordan Osecki and Geoff Oxholm

Implemented successfully are the rescursive descent parser written by hand
and an automatically generated parser, both are in Java.

Part 1:  The recursive descent parser reads a list using the grammar
provided. It creates an internal data structure and then uses a print
routine to print it out exactly as is. It can be run with standard input or
by being given a file.

Part 2:  The parser generator (CUP/Lex) reads a list using the same grammer.
It creates an internal data structure (using action code) and then uses a 
print routine to print it out exactly as is.

Files Included:
-makefile:  Can be used to compile and run each part with stdin
-List_RDP.java:  The file which contains the recursive descent parser (Part 1)
-List_CUP.cup:  The file which contains the cup information (Part 2)
-List_CUP.lex:  The file which contains the lex information (Part 2)
-List.java:  The top level data structure used (DS)
-Sequence.java:  The mid level data structure used (DS)
-ListElement.java:  The low level data structure used (DS)
-NumberListElement.java:  The specific low level data structure (DS)
-ListListElement.java:  The second specific low level data structure (DS)
-sample_input:  sample input file to be used to run either
-sample_output:  The output produced by each after run with the input file
-README:  This readme file with all required information

Running the code:

-To run the code to accept standard input, simply run "make part1" and "make
part2" for each part, respectively. It will compile the code and then run it
accepting standard in. The only problem with this is that for Part 2, it
responds to your inputs one step behind. This was a problem I also had in
CS360 (Undergrad version) and the professor could not figure out how to fix
it and said it was fine.

-To run the code with a file as input, simply run "make part1file" and "make
part2file" for each part, respectively. This will run it with sample_input
as the input file. You can change the variable INPUT_FILE inside of makefile
to have it run on a different file.

How the code works:
-Part 1: It works like a normal recursive descent parser. The code is
commented as well. List_RDP.java has methods for each rule of the grammar to
handle each. It uses match() and token type functions to parse the grammar.
As each level it uses the data structure described above to build up the
list.
-Part 2: It works like a normal cup/lex set-up and is commented. It has the
grammar programmed in in its format and the action code builds up the data
structure in the same way as the RDP.

Testing:
-Tested both parts against all variations of lists that could be thrown at
it. Tested it against empty list, lists with one element, all types of
negative and positive integers of different sizes, nested lists, etc. Note:
Our program handles negative and positive integers only. This shows that
we know how to handle more than just the generic case (positive digits 0-9).

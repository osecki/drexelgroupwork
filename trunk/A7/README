Assignment 7
CS550 Programming Languages
Spring 2009, 6/3/2009
Team: (Group 7) Jordan Osecki, Geoff Oxholm and Alimore Reza
Team Lead on this Assignment:  Oxholm

Implemented successfully are the following parts:
-Part 1:  Updated language to Lecture 2C
-Part 2:  Updated RAM simulator to handle JMI
-Part 3:  Implemented a run-time stack to store activation records
-Part 4:  Adjusted translate() methods and apply() in proc
-Part 5:  Modified the symbol table accordingly
-Part 6:  Implemented the link() method
-Part 7:  Implemented the compile() method
-Part 8:  Created output method which saves program.txt and memory.txt

Notes:
-Our A7 does not support optimization, as it was not required.
-We modified RAM to support dynamic memory re-sizing, so that as activation
records are added, it expands to handle it.
-We treat main as its own type of proc, without a return. The activation
records are created in the order that they are called.
-Instead of modifying RAM to have it start the PC at main, the program is
hard-coded to begin with a funCall to main().

Files Included:

-makefile:  The makefile which can be used to compile and run everything
-README:  This readme file with all required information
-samples/*:  Input and output files from testing the program parts

-Program.h/.cpp - Mini-compiler File
-StmtList.h/.cpp - Mini-compiler File
-Stmt.h - Mini-compiler File
-AssignStmt.h/.cpp - Mini-compiler File
-IfStmt.h/.cpp - Mini-compiler File
-WhileStmt.h/.cpp - Mini-compiler File
-Expr.h - Mini-compiler File
-Plus.h/.cpp - Mini-compiler File
-Times.h/.cpp - Mini-compiler File
-Minus.h/.cpp - Mini-compiler File
-Ident.h/.cpp - Mini-compiler File
-DefineStmt.h/.cpp - Mini-compiler File
-Proc.h/.cpp - Mini-compiler File
-FunCall.h/.cpp - Mini-compiler File

-SymbolDetails.h/.cpp - Has data structure for new symbol table

-interpreter.ypp - ML Interpreter ypp
-interpreter.y - ML Interpreter y
-lex.l - ML Interpreter lex

Running the code:

-To run the code, run "make" to first compile it. To run, then do
"./Compiler < inputFile".  It will print output and it will create a file
"program.txt" and "mem.txt" to run in the RAM simulator. To run that, compile
it (g++ *.cpp *.h -o RAM) and run the main (./RAM). It will ask for program 
and memory size, followed by file paths. You will need to calculate their lines.

*** The "main()" activation record is put first, so look for the results of
variables in main() right below the last spot in initial memory. (I.E. if
you have two variables in main, and initial memory is size 30, look at slots
31 and 32 for your ending variables results). ***

*** Sometimes there are just so many variables (i.e. recursion) that it will
scroll off of the screen in the printed output from RAM. If this occurs,
simply output the result to a file and look in the appropriate slots for
your variable answers. ***

-Examples are included in samples/*. You need to know the number of lines 
in each file to run them. Samples contains some sample examples with different
types of procs, and their resulting outputs are included there as well.

How the code works:
-The code works through starting with the code from Lecture 2c and then
making a translate() method just like eval(), which builds a vector and edits
a new symbol table. After it is over, addresses for the symbols and labels are
calculated, and substituted into the list. Then the two files are created.
With the additionm of Procs, this has caused much of the control code to be
moved to Proc.cpp in the translate() and apply() methods there. Main is
treated as a proc and there is a funCall at the beginning of each program
that hard-codedly calls main(). A function table keeps track of the
functions and there are activation records which will expand memory as more
function calls are made.

Testing:
-Testing was done using the files in samples/*. They all test a bunch of
programs being converted, and there are many example files for a
comprehensive test, along with its program.txt and mem.txt for its
output.


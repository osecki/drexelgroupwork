%{

#include <iostream>
#include <string>
#include "Element.h"
#include "Expr.h"
#include "FunCall.h"
#include "Ident.h"
#include "Plus.h"
#include "Minus.h"
#include "Times.h"
#include "Proc.h"
#include "Program.h"
#include "IfStmt.h"
#include "WhileStmt.h"
#include "AssignStmt.h"
#include "DefineStmt.h"
#include "Stmt.h"
#include "StmtList.h"
#include "List.h"
#include "Number.h"
#include "Car.h"
#include "Cdr.h"
#include "Cons.h"
#include "Concat.h"
#include "Nullp.h"
#include "Listp.h"
#include "Intp.h"
#include "Memory.h"

using namespace std;
void yyerror (const char *error);


extern "C"
{


/**
 *  Program:  ML-interpreterBody.ypp
 *  Authors:  Group 7: Jordan Osecki, Geoff Oxholm, Rich Price, and Alimoor Reza
 *  Class:    CS550, Assignment 2, Spring 2009
**/

        int yyparse(void);
        int yylex(void);
        int yywrap()
        {
                return 1;
        }
}


StmtList *SL;
list<string> *PL;
list<Expr*> *EL;
list<Expr*> *SQ;
Program *P;

%}

%union x {
  int       value;  /* For the lexical analyser. NUMBER tokens */
  char      *ident;  /* For the lexical analyser. IDENT tokens */
  Expr      *exprptr;
  Stmt      *stmtptr;
  StmtList  *stmtlistptr;
  list<string> *paramlistptr;
  list<Expr*> *exprlistptr;
  List* listptr;
  list<Expr*> *listsequenceptr;
  Element  *elementptr;
}

%token CAR
%token CDR
%token NULLP
%token LISTP
%token INTP
%token CONS


%token <ident> IDENT
%token <value> NUMBER
%token ASSIGNOP
%token DEFINE
%token IF
%token THEN
%token ELSE
%token FI
%token WHILE
%token DO
%token OD
%token PROC
%token END

%type <exprptr> expr
%type <exprptr> term
%type <exprptr> factor
%type <exprptr> funcall
%type <stmtptr> stmt
%type <stmtptr> assign_stmt
%type <stmtptr> define_stmt
%type <stmtptr> if_stmt
%type <stmtptr> while_stmt
%type <stmtlistptr> stmt_list
%type <paramlistptr> param_list
%type <exprlistptr> expr_list

%type <listptr> list
%type <listsequenceptr> sequence
%type <elementptr> element

%%

program:
    stmt_list { cout << "Program -> StmtList" << endl;
                P = new Program($1);
                cout << "Program -> StmtList" << endl;
                P->eval();
                P->dump(); }
    ;

stmt_list:
    stmt ';' stmt_list { cout << "StmtList -> Stmt ; StmtList" << endl;
                         $3->insert($1); $$ = $3; }
    |
    stmt  { cout << "StmtList -> Stmt" << endl;
            SL = new StmtList();  SL->insert($1); $$ = SL; }
    ;

stmt:  assign_stmt { cout << "Stmt -> AssignStmt" << endl;
                     $$ = $1; }
    |  define_stmt { cout << "Stmt -> DefineStmt" << endl;
                     $$ = $1; }
    |  if_stmt     { cout << "Stmt -> IfStmt" << endl;
                     $$ = $1; }
    |  while_stmt  { cout << "Stmt -> WhileStmt" << endl;
                     $$ = $1; }
    ;

assign_stmt:
    IDENT ASSIGNOP expr { cout << "AssignStmt -> Identifier := Expr" << endl;
                          $$ = new AssignStmt(string($1),$3); }
    ;

define_stmt:
    DEFINE IDENT PROC '(' param_list ')' stmt_list END { cout << "DefineStmt -> Define ID proc" << endl;
                                                         cout << "( param_list ) StmtList end" << endl;
                                                         $$ = new DefineStmt(string($2),new Proc($5,$7)); }
    ;


if_stmt:
    IF expr THEN stmt_list ELSE stmt_list FI { cout << "IfStmt -> IF expr THEN StmtList ELSE StmtList FI" << endl;
                                               $$ = new IfStmt($2,$4,$6); }
    ;

while_stmt:
    WHILE expr DO stmt_list OD { cout << "WhileStmt -> WHILE expr DO StmtList OD" << endl;
                                 $$ = new WhileStmt($2,$4); }
    ;

param_list:
    IDENT ',' param_list { cout << "ParamList -> IDENT, ParamList" << endl;
                           $3->push_front(string($1)); $$ = $3; }
    |
    IDENT { cout << "ParamList -> IDENT" << endl;
            PL = new list<string>;
            PL->push_front(string($1));
            $$ = PL; }
    ;

expr:
    expr '+' term {
        cout << "Expr -> expr + term" << endl;
        $$ = new Plus($1,$3);
    }
    |
    expr '-' term {
        cout << "Expr -> expr - term" << endl;
        $$ = new Minus($1,$3);
    }
    |
    expr '||' factor {
        cout << "Expr -> expr || factor" << endl;
        $$ = new Concat ($1, $3);
    }
    |
    term {
        cout << "Expr -> term" << endl;
        $$ = $1;
    }
    ;

term: term '*' factor   { cout << "Term -> Term * Factor" << endl;
                          $$ = new Times($1,$3); }
    | factor            { cout << "Term -> Factor" << endl;
                          $$ = $1; }
    ;

// Types of values
factor:
    '(' expr ')'  {
        cout << "Factor -> (expr)" << endl;
        $$ = $2;
    }
    |
    element {
        cout << "Factor -> element" << endl;
        $$ = $1;
    }
    |
    IDENT {
        cout << "Factor -> IDENT" << endl;
        $$ = new Ident(string($1));
    }
    |
    funcall {
        cout << "Factor -> funcall" << endl;
        $$ = $1;
    }
    |
    CAR '(' expr ')' {
        cout << "Factor -> car (expr)" << endl;
        $$ = new Car ($3);
    }
    |
    CDR '(' expr ')' {
        cout << "Factor -> cdr (expr)" << endl;
        $$ = new Cdr ($3);
    }
    |
    NULLP '(' expr ')' {
        cout << "Factor -> nullp (expr)" << endl;
        $$ = new Nullp ($3);
    }
    |
    INTP '(' expr ')' {
        cout << "Factor -> intp (expr)" << endl;
        $$ = new Intp ($3);
    }
    |
    LISTP '(' expr ')' {
        cout << "Factor -> listp (expr)" << endl;
        $$ = new Listp ($3);
    }
    |
    CONS '(' expr ',' expr ')' {
        cout << "Factor -> cons (expr, expr)" << endl;
        $$ = new Cons ($5, $3);
    }
    ;

list:       '[' sequence ']' { cout << "List -> [ sequence ]" << endl;
                               $$ = new List($2); }
    |       '[' ']'          { cout << "List  -> []" << endl;
                               $$ = new List(); }
    ;

sequence:
    expr ',' sequence { cout << "Seq -> element, seq" << endl;
                           $3->push_front($1); $$ = $3; }
    |
    expr { cout << "seq -> element" << endl;
              SQ = new list<Expr*>;
              SQ->push_front($1);
              $$ = SQ; }
    ;

element:
    NUMBER { cout << "elment -> number" << endl;
             $$ = new Number($1); }
    |
    list { cout << "Element -> list" << endl;
           $$ = $1; }
    ;

funcall:
    IDENT '(' expr_list ')' { cout << "Funcall -> Identifier ( expr_list)" << endl;
                              $$ = new FunCall(string($1),$3); }
    ;

expr_list:
    expr ',' expr_list { cout << "ExprList -> expr, exprList" << endl;
                         $3->push_front($1);  $$ = $3; }
    |
    expr { cout << "ExprList -> expr" << endl;
           EL = new list<Expr*>;
           EL->push_front($1); $$ = EL;
    }
%%

int main()
{
    cout << "Translating Program" << endl;
    return yyparse();
}

void yyerror (const char *error)
{
    cout << error << endl;
}
